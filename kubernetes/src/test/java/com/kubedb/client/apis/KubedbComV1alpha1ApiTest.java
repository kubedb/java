/*
 * KubeDB
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * Contact: hello@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kubedb.client.apis;

import com.kubedb.client.ApiException;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import com.kubedb.client.models.V1alpha1DormantDatabase;
import com.kubedb.client.models.V1alpha1DormantDatabaseList;
import com.kubedb.client.models.V1alpha1Elasticsearch;
import com.kubedb.client.models.V1alpha1ElasticsearchList;
import com.kubedb.client.models.V1alpha1Memcached;
import com.kubedb.client.models.V1alpha1MemcachedList;
import com.kubedb.client.models.V1alpha1MongoDB;
import com.kubedb.client.models.V1alpha1MongoDBList;
import com.kubedb.client.models.V1alpha1MySQL;
import com.kubedb.client.models.V1alpha1MySQLList;
import com.kubedb.client.models.V1alpha1Postgres;
import com.kubedb.client.models.V1alpha1PostgresList;
import com.kubedb.client.models.V1alpha1Redis;
import com.kubedb.client.models.V1alpha1RedisList;
import com.kubedb.client.models.V1alpha1Snapshot;
import com.kubedb.client.models.V1alpha1SnapshotList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KubedbComV1alpha1Api
 */
@Ignore
public class KubedbComV1alpha1ApiTest {

    private final KubedbComV1alpha1Api api = new KubedbComV1alpha1Api();

    
    /**
     * 
     *
     * create a DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedDormantDatabaseTest() throws ApiException {
        String namespace = null;
        V1alpha1DormantDatabase body = null;
        String pretty = null;
        V1alpha1DormantDatabase response = api.createNamespacedDormantDatabase(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedElasticsearchTest() throws ApiException {
        String namespace = null;
        V1alpha1Elasticsearch body = null;
        String pretty = null;
        V1alpha1Elasticsearch response = api.createNamespacedElasticsearch(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedMemcachedTest() throws ApiException {
        String namespace = null;
        V1alpha1Memcached body = null;
        String pretty = null;
        V1alpha1Memcached response = api.createNamespacedMemcached(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedMongoDBTest() throws ApiException {
        String namespace = null;
        V1alpha1MongoDB body = null;
        String pretty = null;
        V1alpha1MongoDB response = api.createNamespacedMongoDB(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedMySQLTest() throws ApiException {
        String namespace = null;
        V1alpha1MySQL body = null;
        String pretty = null;
        V1alpha1MySQL response = api.createNamespacedMySQL(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedPostgresTest() throws ApiException {
        String namespace = null;
        V1alpha1Postgres body = null;
        String pretty = null;
        V1alpha1Postgres response = api.createNamespacedPostgres(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedRedisTest() throws ApiException {
        String namespace = null;
        V1alpha1Redis body = null;
        String pretty = null;
        V1alpha1Redis response = api.createNamespacedRedis(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedSnapshotTest() throws ApiException {
        String namespace = null;
        V1alpha1Snapshot body = null;
        String pretty = null;
        V1alpha1Snapshot response = api.createNamespacedSnapshot(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedDormantDatabaseTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedDormantDatabase(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedElasticsearchTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedElasticsearch(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedMemcachedTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedMemcached(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedMongoDBTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedMongoDB(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedMySQLTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedMySQL(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedPostgresTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedPostgres(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedRedisTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedRedis(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedSnapshotTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedSnapshot(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedDormantDatabaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedDormantDatabase(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedElasticsearchTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedElasticsearch(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedMemcachedTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedMemcached(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedMongoDBTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedMongoDB(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedMySQLTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedMySQL(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedPostgresTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedPostgres(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedRedisTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedRedis(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedSnapshotTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedSnapshot(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDormantDatabaseForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1DormantDatabaseList response = api.listDormantDatabaseForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listElasticsearchForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1ElasticsearchList response = api.listElasticsearchForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMemcachedForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1MemcachedList response = api.listMemcachedForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMongoDBForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1MongoDBList response = api.listMongoDBForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMySQLForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1MySQLList response = api.listMySQLForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedDormantDatabaseTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1DormantDatabaseList response = api.listNamespacedDormantDatabase(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedElasticsearchTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1ElasticsearchList response = api.listNamespacedElasticsearch(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedMemcachedTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1MemcachedList response = api.listNamespacedMemcached(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedMongoDBTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1MongoDBList response = api.listNamespacedMongoDB(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedMySQLTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1MySQLList response = api.listNamespacedMySQL(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedPostgresTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1PostgresList response = api.listNamespacedPostgres(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedRedisTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1RedisList response = api.listNamespacedRedis(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedSnapshotTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1SnapshotList response = api.listNamespacedSnapshot(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPostgresForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1PostgresList response = api.listPostgresForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRedisForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1RedisList response = api.listRedisForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1SnapshotList response = api.listSnapshotForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedDormantDatabaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1DormantDatabase response = api.patchNamespacedDormantDatabase(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedElasticsearchTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Elasticsearch response = api.patchNamespacedElasticsearch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedMemcachedTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Memcached response = api.patchNamespacedMemcached(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedMongoDBTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1MongoDB response = api.patchNamespacedMongoDB(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedMySQLTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1MySQL response = api.patchNamespacedMySQL(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedPostgresTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Postgres response = api.patchNamespacedPostgres(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedRedisTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Redis response = api.patchNamespacedRedis(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedSnapshotTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Snapshot response = api.patchNamespacedSnapshot(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedDormantDatabaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1DormantDatabase response = api.readNamespacedDormantDatabase(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedElasticsearchTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Elasticsearch response = api.readNamespacedElasticsearch(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedMemcachedTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Memcached response = api.readNamespacedMemcached(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedMongoDBTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1MongoDB response = api.readNamespacedMongoDB(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedMySQLTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1MySQL response = api.readNamespacedMySQL(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedPostgresTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Postgres response = api.readNamespacedPostgres(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedRedisTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Redis response = api.readNamespacedRedis(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedSnapshotTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Snapshot response = api.readNamespacedSnapshot(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DormantDatabase
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedDormantDatabaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1DormantDatabase body = null;
        String pretty = null;
        V1alpha1DormantDatabase response = api.replaceNamespacedDormantDatabase(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Elasticsearch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedElasticsearchTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Elasticsearch body = null;
        String pretty = null;
        V1alpha1Elasticsearch response = api.replaceNamespacedElasticsearch(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Memcached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedMemcachedTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Memcached body = null;
        String pretty = null;
        V1alpha1Memcached response = api.replaceNamespacedMemcached(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MongoDB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedMongoDBTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1MongoDB body = null;
        String pretty = null;
        V1alpha1MongoDB response = api.replaceNamespacedMongoDB(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MySQL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedMySQLTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1MySQL body = null;
        String pretty = null;
        V1alpha1MySQL response = api.replaceNamespacedMySQL(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Postgres
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedPostgresTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Postgres body = null;
        String pretty = null;
        V1alpha1Postgres response = api.replaceNamespacedPostgres(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Redis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRedisTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Redis body = null;
        String pretty = null;
        V1alpha1Redis response = api.replaceNamespacedRedis(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedSnapshotTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Snapshot body = null;
        String pretty = null;
        V1alpha1Snapshot response = api.replaceNamespacedSnapshot(name, namespace, body, pretty);

        // TODO: test validations
    }
    
}
