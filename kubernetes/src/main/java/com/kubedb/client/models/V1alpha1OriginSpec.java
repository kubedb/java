/*
 * KubeDB
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * Contact: hello@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kubedb.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kubedb.client.models.V1alpha1ElasticsearchSpec;
import com.kubedb.client.models.V1alpha1EtcdSpec;
import com.kubedb.client.models.V1alpha1MemcachedSpec;
import com.kubedb.client.models.V1alpha1MongoDBSpec;
import com.kubedb.client.models.V1alpha1MySQLSpec;
import com.kubedb.client.models.V1alpha1PostgresSpec;
import com.kubedb.client.models.V1alpha1RedisSpec;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1alpha1OriginSpec
 */

public class V1alpha1OriginSpec {
  @SerializedName("elasticsearch")
  private V1alpha1ElasticsearchSpec elasticsearch = null;

  @SerializedName("etcd")
  private V1alpha1EtcdSpec etcd = null;

  @SerializedName("memcached")
  private V1alpha1MemcachedSpec memcached = null;

  @SerializedName("mongodb")
  private V1alpha1MongoDBSpec mongodb = null;

  @SerializedName("mysql")
  private V1alpha1MySQLSpec mysql = null;

  @SerializedName("postgres")
  private V1alpha1PostgresSpec postgres = null;

  @SerializedName("redis")
  private V1alpha1RedisSpec redis = null;

  public V1alpha1OriginSpec elasticsearch(V1alpha1ElasticsearchSpec elasticsearch) {
    this.elasticsearch = elasticsearch;
    return this;
  }

   /**
   * Elasticsearch Spec
   * @return elasticsearch
  **/
  @ApiModelProperty(value = "Elasticsearch Spec")
  public V1alpha1ElasticsearchSpec getElasticsearch() {
    return elasticsearch;
  }

  public void setElasticsearch(V1alpha1ElasticsearchSpec elasticsearch) {
    this.elasticsearch = elasticsearch;
  }

  public V1alpha1OriginSpec etcd(V1alpha1EtcdSpec etcd) {
    this.etcd = etcd;
    return this;
  }

   /**
   * Etcd Spec
   * @return etcd
  **/
  @ApiModelProperty(value = "Etcd Spec")
  public V1alpha1EtcdSpec getEtcd() {
    return etcd;
  }

  public void setEtcd(V1alpha1EtcdSpec etcd) {
    this.etcd = etcd;
  }

  public V1alpha1OriginSpec memcached(V1alpha1MemcachedSpec memcached) {
    this.memcached = memcached;
    return this;
  }

   /**
   * Memcached Spec
   * @return memcached
  **/
  @ApiModelProperty(value = "Memcached Spec")
  public V1alpha1MemcachedSpec getMemcached() {
    return memcached;
  }

  public void setMemcached(V1alpha1MemcachedSpec memcached) {
    this.memcached = memcached;
  }

  public V1alpha1OriginSpec mongodb(V1alpha1MongoDBSpec mongodb) {
    this.mongodb = mongodb;
    return this;
  }

   /**
   * MongoDB Spec
   * @return mongodb
  **/
  @ApiModelProperty(value = "MongoDB Spec")
  public V1alpha1MongoDBSpec getMongodb() {
    return mongodb;
  }

  public void setMongodb(V1alpha1MongoDBSpec mongodb) {
    this.mongodb = mongodb;
  }

  public V1alpha1OriginSpec mysql(V1alpha1MySQLSpec mysql) {
    this.mysql = mysql;
    return this;
  }

   /**
   * MySQL Spec
   * @return mysql
  **/
  @ApiModelProperty(value = "MySQL Spec")
  public V1alpha1MySQLSpec getMysql() {
    return mysql;
  }

  public void setMysql(V1alpha1MySQLSpec mysql) {
    this.mysql = mysql;
  }

  public V1alpha1OriginSpec postgres(V1alpha1PostgresSpec postgres) {
    this.postgres = postgres;
    return this;
  }

   /**
   * Postgres Spec
   * @return postgres
  **/
  @ApiModelProperty(value = "Postgres Spec")
  public V1alpha1PostgresSpec getPostgres() {
    return postgres;
  }

  public void setPostgres(V1alpha1PostgresSpec postgres) {
    this.postgres = postgres;
  }

  public V1alpha1OriginSpec redis(V1alpha1RedisSpec redis) {
    this.redis = redis;
    return this;
  }

   /**
   * Redis Spec
   * @return redis
  **/
  @ApiModelProperty(value = "Redis Spec")
  public V1alpha1RedisSpec getRedis() {
    return redis;
  }

  public void setRedis(V1alpha1RedisSpec redis) {
    this.redis = redis;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1OriginSpec v1alpha1OriginSpec = (V1alpha1OriginSpec) o;
    return Objects.equals(this.elasticsearch, v1alpha1OriginSpec.elasticsearch) &&
        Objects.equals(this.etcd, v1alpha1OriginSpec.etcd) &&
        Objects.equals(this.memcached, v1alpha1OriginSpec.memcached) &&
        Objects.equals(this.mongodb, v1alpha1OriginSpec.mongodb) &&
        Objects.equals(this.mysql, v1alpha1OriginSpec.mysql) &&
        Objects.equals(this.postgres, v1alpha1OriginSpec.postgres) &&
        Objects.equals(this.redis, v1alpha1OriginSpec.redis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elasticsearch, etcd, memcached, mongodb, mysql, postgres, redis);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1OriginSpec {\n");
    
    sb.append("    elasticsearch: ").append(toIndentedString(elasticsearch)).append("\n");
    sb.append("    etcd: ").append(toIndentedString(etcd)).append("\n");
    sb.append("    memcached: ").append(toIndentedString(memcached)).append("\n");
    sb.append("    mongodb: ").append(toIndentedString(mongodb)).append("\n");
    sb.append("    mysql: ").append(toIndentedString(mysql)).append("\n");
    sb.append("    postgres: ").append(toIndentedString(postgres)).append("\n");
    sb.append("    redis: ").append(toIndentedString(redis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

